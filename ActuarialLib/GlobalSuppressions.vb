
' This file is used by Code Analysis to maintain SuppressMessage 
' attributes that are applied to this project.
' Project-level suppressions either have no target or are given 
' a specific target and scoped to a namespace, type, member, etc.

<Assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1801:Parameter atValue of method AtValueIsValid is never used. Remove the parameter or use it in the method body.", Justification:="<Pending>", Scope:="member", Target:="~M:ActuarialLib.MFBase.AtValueIsValid(System.Double)~System.Boolean")>
<Assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1825:Avoid unnecessary zero-length array allocations.  Use Array.Empty(Of MFBase)() instead.", Justification:="<Pending>", Scope:="member", Target:="~M:ActuarialLib.MFExponential.Add(ActuarialLib.MFExponential,ActuarialLib.MFExponential)~ActuarialLib.MFGeneral")>
<Assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1033:Make 'MFGeneral' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'GetEnumerator' and is visible to derived classes.", Justification:="<Pending>", Scope:="member", Target:="~M:ActuarialLib.MFGeneral.GetEnumerator~System.Collections.Generic.IEnumerator{ActuarialLib.MFBase}")>
<Assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1033:Make 'MFGeneral' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'GetEnumerator1' and is visible to derived classes.", Justification:="<Pending>", Scope:="member", Target:="~M:ActuarialLib.MFGeneral.GetEnumerator1~System.Collections.IEnumerator")>
<Assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Function MFPolynomial.Divide(polynomial1 As MFPolynomial, exponential2 As MFExponential) As MFProduct', validate parameter 'exponential2' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification:="<Pending>", Scope:="member", Target:="~M:ActuarialLib.MFPolynomial.Divide(ActuarialLib.MFPolynomial,ActuarialLib.MFExponential)~ActuarialLib.MFProduct")>
<Assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Operator MFPolynomial./(polynomial1 As MFPolynomial, exponential2 As MFExponential) As MFProduct', validate parameter 'exponential2' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification:="<Pending>", Scope:="member", Target:="~M:ActuarialLib.MFPolynomial.op_Division(ActuarialLib.MFPolynomial,ActuarialLib.MFExponential)~ActuarialLib.MFProduct")>
<Assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA2218:Override GetHashCode on overriding Equals", Justification:="<Pending>", Scope:="type", Target:="~T:ActuarialLib.MFExponential")>
<Assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1710:Rename ActuarialLib.MFGeneral to end in 'Collection'.", Justification:="<Pending>", Scope:="type", Target:="~T:ActuarialLib.MFGeneral")>
<Assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA2218:Override GetHashCode on overriding Equals", Justification:="<Pending>", Scope:="type", Target:="~T:ActuarialLib.MFGeneral")>
<Assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA2218:Override GetHashCode on overriding Equals", Justification:="<Pending>", Scope:="type", Target:="~T:ActuarialLib.MFPolynomial")>
<Assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA2218:Override GetHashCode on overriding Equals", Justification:="<Pending>", Scope:="type", Target:="~T:ActuarialLib.MFProduct")>
<Assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1710:Rename ActuarialLib.StepFunctionMath to end in 'Collection'.", Justification:="<Pending>", Scope:="type", Target:="~T:ActuarialLib.StepFunctionMath")>